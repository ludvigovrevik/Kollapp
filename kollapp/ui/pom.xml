<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>ui</artifactId>
    <packaging>jar</packaging>

    <parent>
        <groupId>gr2409</groupId>
        <artifactId>kollapp</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <properties>
        <!-- Define base directories for platform-specific JavaFX -->
        <javafx.platform.base>${project.basedir}/../../javafx-dependencies</javafx.platform.base>
        
        <!-- Platform-specific paths -->
        <javafx.jmods.path.windows>${javafx.platform.base}/windows/javafx-jmods-17.0.13</javafx.jmods.path.windows>
        <javafx.jmods.path.mac>${javafx.platform.base}/mac/javafx-jmods-17.0.13</javafx.jmods.path.mac>
        <javafx.jmods.path.linux>${javafx.platform.base}/linux/javafx-jmods-17.0.13</javafx.jmods.path.linux>
    </properties>

    <dependencies>
        <!-- Dependency on core module -->
        <dependency>
            <groupId>gr2409</groupId>
            <artifactId>core</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>gr2409</groupId>
            <artifactId>api</artifactId>
            <version>${project.version}</version>
            <classifier>spring-boot</classifier>
            <scope>test</scope>
        </dependency>

        <!-- Dependency on persistence module -->
        <dependency>
            <groupId>gr2409</groupId>
            <artifactId>persistence</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- JavaFX dependencies -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
        </dependency>

        <!-- JUnit dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- TestFX dependencies -->
		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-core</artifactId>
			<version>4.0.16-alpha</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>testfx-junit5</artifactId>
			<version>4.0.16-alpha</version>
			<scope>test</scope>
        </dependency>
        
        <!--Monocle-->
        <dependency>
            <groupId>org.testfx</groupId>
            <artifactId>openjfx-monocle</artifactId>
            <version>17.0.10</version>
            <scope>test</scope>
        </dependency>

        <!-- Hamcrest -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>

        <!-- Jackson Core -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>

        <!-- Jackson Databind: Core Jackson library for converting Java objects to/from JSON format -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Jackson Datatype JSR310: Adds support for Java 8 Date and Time API types (e.g., LocalDate) when using Jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>

        <!-- JavaFX Base: Provides the base components of JavaFX for creating desktop applications -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
            <classifier>win</classifier> <!-- Specifies Windows-specific binaries -->
        </dependency>

        <!-- JavaFX Controls: Includes JavaFX UI controls (e.g., buttons, text fields) for building the application's user interface -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
            <classifier>win</classifier> <!-- Specifies Windows-specific binaries -->
        </dependency>

        <!-- JavaFX FXML: Provides FXML support for JavaFX, allowing UI structure to be defined in XML -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
            <classifier>win</classifier> <!-- Specifies Windows-specific binaries -->
        </dependency>

        <!-- JavaFX Graphics: Contains the core graphics components for JavaFX, such as rendering graphics and handling media -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
            <classifier>win</classifier> <!-- Specifies Windows-specific binaries -->
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Surefire plugin with specific configuration -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>
                        @{jaCoCoArgLine}
                        --add-reads ui=ALL-UNNAMED
                        --add-opens ui/ui=ALL-UNNAMED
                        --add-opens javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
                        --add-opens javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
                        --add-opens javafx.base/com.sun.javafx.collections=ALL-UNNAMED
                        --add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
                        --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
                        --add-exports javafx.graphics/com.sun.javafx.util=ALL-UNNAMED
                        --add-exports javafx.base/com.sun.javafx.logging=ALL-UNNAMED
                        --add-opens core/core=ALL-UNNAMED
                    </argLine>
                    <skipTests>${skipTests}</skipTests>
                    <excludes>
                        <exclude>${uiTestExcludePattern}</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <configuration>
                    <propertyName>jaCoCoArgLine</propertyName>
                </configuration>
            </plugin>

            <plugin>
                <!-- Create fat JAR with all dependencies -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.5.0</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>ui.KollApp</mainClass>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.factories</resource>
                                </transformer>
                            </transformers>
                            <filters>
                                <filter>
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/*.SF</exclude>
                                        <exclude>META-INF/*.DSA</exclude>
                                        <exclude>META-INF/*.RSA</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <artifactSet>
                                <includes>
                                    <include>org.openjfx:*</include>
                                    <include>*:*</include>
                                </includes>
                            </artifactSet>
                            <outputFile>${project.build.directory}/ui-full.jar</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Create jpackage installer -->
                <groupId>org.panteleyev</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <version>1.4.0</version>
                <configuration>
                    <name>KollApp</name>
                    <appVersion>1.0.0</appVersion>
                    <vendor>gr2409</vendor>
                    <destination>target/dist</destination>
                    <mainJar>ui-full.jar</mainJar>
                    <mainClass>ui.KollApp</mainClass>
                    <input>${project.build.directory}</input>
                    
                    <!-- Module configuration -->
                    <modulePaths>
                        <modulePath>${javafx.jmods.path}</modulePath>
                        <modulePath>${java.home}/jmods</modulePath>
                    </modulePaths>

                    <!-- Specify which modules to add -->
                    <addModules>
                        <addModule>javafx.controls</addModule>
                        <addModule>javafx.fxml</addModule>
                        <addModule>javafx.graphics</addModule>
                        <addModule>javafx.base</addModule>
                        <addModule>java.sql</addModule>
                        <addModule>java.naming</addModule>
                        <addModule>java.xml</addModule>
                        <addModule>jdk.unsupported</addModule>
                        <addModule>java.net.http</addModule>
                    </addModules>
                    
                    <!-- JavaFX configuration -->
                    <javaOptions>
                        <option>--add-opens</option>
                        <option>javafx.graphics/com.sun.javafx.application=ALL-UNNAMED</option>
                        <option>--add-opens</option>
                        <option>javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED</option>
                        <option>--add-opens</option>
                        <option>javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED</option>
                        <option>--add-opens</option>
                        <option>javafx.base/com.sun.javafx.collections=ALL-UNNAMED</option>
                    </javaOptions>

                    <!-- Enable verbose output for debugging -->
                    <verbose>true</verbose>
                </configuration>
            </plugin>

            <plugin>
                <!-- Maven Failsafe Plugin: Used for running integration tests that end with *IT.java -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <includes>
                        <include>**/*IT.java</include>
                    </includes>
                    <argLine>
                        @{jaCoCoArgLine}
                        --add-modules javafx.controls,javafx.fxml
                        --add-opens javafx.graphics/com.sun.javafx.application=ALL-UNNAMED 
                        --add-opens javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED 
                        --add-opens javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED
                        --add-opens javafx.base/com.sun.javafx.collections=ALL-UNNAMED
                        --add-opens javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
                        --add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
                        --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
                        --add-exports javafx.graphics/com.sun.javafx.util=ALL-UNNAMED
                        --add-exports javafx.base/com.sun.javafx.logging=ALL-UNNAMED
                    </argLine>
                    <systemPropertyVariables>
                        <testfx.robot>glass</testfx.robot>
                        <testfx.headless>true</testfx.headless>
                        <glass.platform>Monocle</glass.platform>
                        <monocle.platform>Headless</monocle.platform>
                        <prism.order>sw</prism.order>
                    </systemPropertyVariables>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Exec Maven Plugin: Manages starting and stopping the API during integration testing -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>start-api</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <async>true</async>
                            <executable>${java.home}/bin/java</executable>
                            <workingDirectory>${project.basedir}/../api/target</workingDirectory>
                            <arguments>
                                <argument>-jar</argument>
                                <argument>api-${project.version}-spring-boot.jar</argument>
                            </arguments>
                            <outputFile>${project.build.directory}/api.log</outputFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-api</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>cmd</executable>
                            <arguments>
                                <argument>/c</argument>
                                <argument>wmic</argument>
                                <argument>process</argument>
                                <argument>where</argument>
                                <argument>"commandline like '%api-${project.version}-spring-boot.jar%'"</argument>
                                <argument>call</argument>
                                <argument>terminate</argument>
                            </arguments>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                                <successCode>128</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Maven Antrun Plugin: Waits for the API to start before proceeding with integration tests -->
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>wait-for-api</id>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <target>
                                <echo message="Waiting for API to start..." />
                                <waitfor maxwait="30" maxwaitunit="second" timeoutproperty="api.timeout">
                                    <socket server="localhost" port="8080"/>
                                </waitfor>
                                <fail if="api.timeout" message="API failed to start"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!-- Windows-specific profile -->
        <profile>
            <id>package-windows</id>
            <activation>
                <os><family>windows</family></os>
            </activation>
            <properties>
                <javafx.jmods.path>${javafx.jmods.path.windows}</javafx.jmods.path>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.panteleyev</groupId>
                        <artifactId>jpackage-maven-plugin</artifactId>
                        <configuration>
                            <type>EXE</type>
                            <winMenu>true</winMenu>
                            <winDirChooser>true</winDirChooser>
                            <winShortcut>true</winShortcut>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- macOS-specific profile -->
        <profile>
            <id>package-mac</id>
            <activation>
                <os><family>mac</family></os>
            </activation>
            <properties>
                <javafx.jmods.path>${javafx.jmods.path.mac}</javafx.jmods.path>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.panteleyev</groupId>
                        <artifactId>jpackage-maven-plugin</artifactId>
                        <configuration>
                            <type>DMG</type>
                            <macPackageIdentifier>com.gr2409.kollapp</macPackageIdentifier>
                            <macPackageName>KollApp</macPackageName>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Linux-specific profile -->
        <profile>
            <id>package-linux</id>
            <activation>
                <os><family>unix</family></os>
            </activation>
            <properties>
                <javafx.jmods.path>${javafx.jmods.path.linux}</javafx.jmods.path>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.panteleyev</groupId>
                        <artifactId>jpackage-maven-plugin</artifactId>
                        <configuration>
                            <type>DEB</type>
                            <linuxPackageName>kollapp</linuxPackageName>
                            <linuxMenuGroup>Development</linuxMenuGroup>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
